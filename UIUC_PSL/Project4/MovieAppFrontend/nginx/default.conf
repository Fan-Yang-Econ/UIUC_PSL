# At the very top of our nginx/default.conf file, add the following directive:

# proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;
#  The options we have used here are as follows:

# /var/cache/nginx sets a directory to store the cached assets
# levels=1:2 sets up a two‑level directory hierarchy as file access speed can be reduced when too many files are in a single directory
# keys_zone=STATIC:10m defines a shared memory zone for cache keys named “STATIC” and with a size limit of 10MB (which should be more than enough unless you have thousands of files)
# inactive=7d is the time that items will remain cached without being accessed (7 days), after which they will be removed
# use_temp_path=off tells NGINX to write files directly to the cache directory and avoid unnecessary copying of data to a temporary storage area first
# Now let’s make use of our new cache, starting with the Next.js built assets.

# When you run a build of your project, Next.js creates some static files including JavaScript bundles for each of your pages, and makes them available at the path /_next/static/*.

# So, let’s add a new location block to our config file where we can tell NGINX to cache these files:

# We tell NGINX to use our cache zone that we called STATIC to cache any file whose path contains the /_next/static directory.

##### proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;

upstream nextjs_upstream {
  server localhost:8080;
}

server {
  listen 80 default_server;

  server_name _;

  server_tokens off;

  gzip on;
  gzip_proxied any; # gzip_proxied any tells NGINX that any proxied files can be gzipped
  gzip_comp_level 4;
  gzip_types text/css application/javascript image/svg+xml;


  # The first location block instructs Nginx to proxy requests to the upstream django servers over HTTP.
  # It additionally preserves client HTTP headers that capture the originating IP address, protocol used to connect, and target host:
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header Host $http_host;
  proxy_redirect off;

  # This directive sets the address of the proxied server and the URI to which location will be mapped.
  # So when you tell Nginx to proxy_pass, you're saying "Pass this request on to this proxy URL".
  # It should be: proxy_pass my-upstream;
  proxy_pass http://nextjs_upstream;

#
#  location /_next/static {
#    proxy_cache STATIC;
#    proxy_pass http://nextjs_upstream;
#
#    # For testing cache - remove before deploying to production
#    add_header X-Cache-Status $upstream_cache_status;
#  }
#
#  location /static {
#    proxy_cache STATIC;
#    proxy_ignore_headers Cache-Control;
#    proxy_cache_valid 60m;
#    proxy_pass http://nextjs_upstream;
#
#    # For testing cache - remove before deploying to production
#    add_header X-Cache-Status $upstream_cache_status;
#  }

}
